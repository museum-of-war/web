import React from 'react';
import { useTheme } from 'next-themes';
import { useViewPort } from '@hooks/useViewport';

const TwitterSvg = ({ size = 48 }: { size?: number }) => {
  const { theme } = useTheme();

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 48 48"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24Z"
        fill={theme === 'dark' ? 'white' : '#212121'}
      />
      <path
        d="M33 17.8942C32.3377 18.2158 31.626 18.4323 30.879 18.5299C31.6418 18.0304 32.2275 17.2387 32.5028 16.2953C31.7895 16.758 30.999 17.0943 30.1575 17.2756C29.4847 16.4906 28.524 16 27.462 16C25.0777 16 23.3258 18.4331 23.8643 20.959C20.796 20.7908 18.075 19.1829 16.2533 16.7391C15.2858 18.5546 15.7515 20.9294 17.3955 22.1321C16.791 22.1107 16.221 21.9295 15.7237 21.6267C15.6832 23.4979 16.9095 25.2486 18.6855 25.6382C18.1658 25.7925 17.5965 25.8285 17.0175 25.7071C17.487 27.3117 18.8505 28.4791 20.4675 28.5119C18.915 29.8433 16.959 30.4381 15 30.1854C16.6342 31.3314 18.576 32 20.661 32C27.5175 32 31.3912 25.6661 31.1572 19.9852C31.8787 19.4151 32.505 18.7039 33 17.8942Z"
        fill={theme === 'dark' ? '#212121' : 'white'}
      />
    </svg>
  );
};

const InstagramSvg = ({ size = 48 }: { size?: number }) => {
  const { theme } = useTheme();

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 48 48"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24Z"
        fill={theme === 'dark' ? 'white' : '#212121'}
      />
      <path
        d="M35 24C35 26.2103 35 27.7009 34.9486 28.5234C34.8458 30.528 34.2804 32.0701 33.1495 33.1495C32.0187 34.229 30.528 34.8458 28.5234 34.9486C27.7009 35 26.1589 35 24 35C21.7897 35 20.2991 35 19.4766 34.9486C17.472 34.8458 15.9299 34.2804 14.8505 33.1495C13.771 32.0701 13.1542 30.528 13.0514 28.5234C13 27.7009 13 26.1589 13 24C13 21.8411 13 20.2991 13.0514 19.4766C13.1542 17.472 13.7196 15.9299 14.8505 14.8505C15.9299 13.771 17.472 13.1542 19.4766 13.0514C20.2991 13 21.8411 13 24 13C26.2103 13 27.7009 13 28.5234 13.0514C30.528 13.1542 32.0701 13.7196 33.1495 14.8505C34.229 15.9813 34.8458 17.472 34.9486 19.4766C34.9486 20.2991 35 21.7897 35 24ZM25.0794 14.9533C24.4112 14.9533 24.0514 14.9533 24 14.9533C23.9486 14.9533 23.5888 14.9533 22.9206 14.9533C22.2523 14.9533 21.7383 14.9533 21.4299 14.9533C21.0701 14.9533 20.6075 14.9533 20.0421 15.0047C19.4766 15.0047 18.9626 15.0561 18.5514 15.1589C18.1402 15.2103 17.7804 15.3131 17.5234 15.4159C17.0607 15.6215 16.6495 15.8785 16.2383 16.2383C15.8785 16.5981 15.6215 17.0093 15.4159 17.5234C15.3131 17.7804 15.2103 18.1402 15.1589 18.5514C15.1075 18.9626 15.0561 19.4252 15.0047 20.0421C15.0047 20.6075 14.9533 21.0701 14.9533 21.4299C14.9533 21.7897 14.9533 22.3037 14.9533 22.9206C14.9533 23.5888 14.9533 23.9486 14.9533 24C14.9533 24.0514 14.9533 24.4112 14.9533 25.0794C14.9533 25.7477 14.9533 26.2617 14.9533 26.5701C14.9533 26.9299 14.9533 27.3925 15.0047 27.9579C15.0047 28.5234 15.0561 29.0374 15.1589 29.4486C15.2617 29.8598 15.3131 30.2196 15.4159 30.4766C15.6215 30.9393 15.8785 31.3505 16.2383 31.7617C16.5981 32.1215 17.0093 32.3785 17.5234 32.5841C17.7804 32.6869 18.1402 32.7897 18.5514 32.8411C18.9626 32.8925 19.4252 32.9439 20.0421 32.9953C20.6589 33.0467 21.0701 33.0467 21.4299 33.0467C21.7897 33.0467 22.3037 33.0467 22.9206 33.0467C23.5888 33.0467 23.9486 33.0467 24 33.0467C24.0514 33.0467 24.4112 33.0467 25.0794 33.0467C25.7477 33.0467 26.2617 33.0467 26.5701 33.0467C26.9299 33.0467 27.3925 33.0467 27.9579 32.9953C28.5234 32.9953 29.0374 32.9439 29.4486 32.8411C29.8598 32.7897 30.2196 32.6869 30.4766 32.5841C30.9393 32.3785 31.3505 32.1215 31.7617 31.7617C32.1215 31.4019 32.3785 30.9907 32.5841 30.4766C32.6869 30.2196 32.7897 29.8598 32.8411 29.4486C32.8925 29.0374 32.9439 28.5748 32.9953 27.9579C32.9953 27.3925 33.0467 26.9299 33.0467 26.5701C33.0467 26.2103 33.0467 25.6963 33.0467 25.0794C33.0467 24.4112 33.0467 24.0514 33.0467 24C33.0467 23.9486 33.0467 23.5888 33.0467 22.9206C33.0467 22.2523 33.0467 21.7383 33.0467 21.4299C33.0467 21.0701 33.0467 20.6075 32.9953 20.0421C32.9953 19.4766 32.9439 18.9626 32.8411 18.5514C32.7897 18.1402 32.6869 17.7804 32.5841 17.5234C32.3785 17.0607 32.1215 16.6495 31.7617 16.2383C31.4019 15.8785 30.9907 15.6215 30.4766 15.4159C30.2196 15.3131 29.8598 15.2103 29.4486 15.1589C29.0374 15.1075 28.5748 15.0561 27.9579 15.0047C27.3925 15.0047 26.9299 14.9533 26.5701 14.9533C26.2617 14.9533 25.7477 14.9533 25.0794 14.9533ZM27.9579 19.9907C29.0374 21.0701 29.6028 22.4065 29.6028 24C29.6028 25.5935 29.0374 26.8785 27.9579 28.0093C26.8785 29.0888 25.5421 29.6542 23.9486 29.6542C22.3551 29.6542 21.0701 29.0888 19.9393 28.0093C18.8598 26.9299 18.2944 25.5935 18.2944 24C18.2944 22.4065 18.8598 21.1215 19.9393 19.9907C21.0187 18.9112 22.3551 18.3458 23.9486 18.3458C25.5421 18.3458 26.8785 18.8598 27.9579 19.9907ZM26.5701 26.5701C27.2897 25.8505 27.6495 24.9766 27.6495 24C27.6495 23.0234 27.2897 22.0981 26.5701 21.3785C25.8505 20.6589 24.9766 20.2991 23.9486 20.2991C22.9206 20.2991 22.0467 20.6589 21.3271 21.3785C20.6075 22.0981 20.2477 22.972 20.2477 24C20.2477 25.028 20.6075 25.9019 21.3271 26.5701C22.0467 27.2897 22.9206 27.6495 23.9486 27.6495C24.9766 27.6495 25.8505 27.2897 26.5701 26.5701ZM30.785 17.1636C31.0421 17.4206 31.1963 17.729 31.1963 18.0888C31.1963 18.4486 31.0421 18.757 30.785 19.014C30.528 19.271 30.2196 19.4252 29.8598 19.4252C29.5 19.4252 29.1916 19.271 28.9346 19.014C28.6776 18.757 28.5234 18.4486 28.5234 18.0888C28.5234 17.729 28.6776 17.4206 28.9346 17.1636C29.1916 16.9065 29.5 16.7523 29.8598 16.7523C30.2196 16.7523 30.528 16.9065 30.785 17.1636Z"
        fill={theme === 'dark' ? '#212121' : 'white'}
      />
    </svg>
  );
};

const GitHubSvg = ({ size = 48 }: { size?: number }) => {
  const { theme } = useTheme();

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 48 48"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24Z"
        fill={theme === 'dark' ? 'white' : '#212121'}
      />
      <path
        d="M24 12C17.374 12 12 17.373 12 24C12 29.302 15.438 33.8 20.207 35.387C20.806 35.498 21 35.126 21 34.81V32.576C17.662 33.302 16.967 31.16 16.967 31.16C16.421 29.773 15.634 29.404 15.634 29.404C14.545 28.659 15.717 28.675 15.717 28.675C16.922 28.759 17.556 29.912 17.556 29.912C18.626 31.746 20.363 31.216 21.048 30.909C21.155 30.134 21.466 29.604 21.81 29.305C19.145 29 16.343 27.971 16.343 23.374C16.343 22.063 16.812 20.993 17.579 20.153C17.455 19.85 17.044 18.629 17.696 16.977C17.696 16.977 18.704 16.655 20.997 18.207C21.954 17.941 22.98 17.808 24 17.803C25.02 17.808 26.047 17.941 27.006 18.207C29.297 16.655 30.303 16.977 30.303 16.977C30.956 18.63 30.545 19.851 30.421 20.153C31.191 20.993 31.656 22.064 31.656 23.374C31.656 27.983 28.849 28.998 26.177 29.295C26.607 29.667 27 30.397 27 31.517V34.81C27 35.129 27.192 35.504 27.801 35.386C32.566 33.797 36 29.3 36 24C36 17.373 30.627 12 24 12Z"
        fill={theme === 'dark' ? '#212121' : 'white'}
      />
    </svg>
  );
};

const OpenSeaSvg = ({ size = 48 }: { size?: number }) => {
  const { theme } = useTheme();

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 48 48"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24Z"
        fill={theme === 'dark' ? 'white' : '#212121'}
      />
      <path
        d="M34 25.8658V26.8528C34 26.9094 33.9633 26.9598 33.91 26.9818C33.5834 27.1141 32.465 27.5989 32 28.2096C30.8133 29.7695 29.9067 32 27.88 32H19.425C16.4283 32 14 29.6987 14 26.8591V26.7678C14 26.6922 14.065 26.6308 14.145 26.6308H18.8583C18.9517 26.6308 19.02 26.7127 19.0117 26.7992C18.9783 27.0889 19.035 27.3848 19.18 27.654C19.46 28.1907 20.04 28.526 20.6667 28.526H23V26.8056H20.6933C20.575 26.8056 20.505 26.6765 20.5733 26.5852C20.5983 26.549 20.6267 26.5112 20.6567 26.4687C20.875 26.1759 21.1867 25.721 21.4967 25.2032C21.7083 24.8537 21.9133 24.4807 22.0783 24.106C22.1117 24.0383 22.1383 23.9691 22.165 23.9014C22.21 23.7817 22.2567 23.67 22.29 23.5582C22.3234 23.4638 22.35 23.3646 22.3767 23.2717C22.455 22.9538 22.4883 22.6169 22.4883 22.2675C22.4883 22.1306 22.4817 21.9873 22.4683 21.8504C22.4617 21.7008 22.4417 21.5513 22.4217 21.4018C22.4083 21.2695 22.3833 21.1389 22.3567 21.0019C22.3234 20.802 22.2767 20.6037 22.2233 20.4038L22.205 20.3282C22.165 20.1913 22.1317 20.0607 22.085 19.9237C21.9533 19.494 21.8017 19.0753 21.6417 18.6833C21.5833 18.5275 21.5167 18.378 21.45 18.2284C21.3517 18.0033 21.2517 17.7987 21.16 17.6051C21.1133 17.5169 21.0733 17.4367 21.0333 17.3548C20.9883 17.2619 20.9417 17.1691 20.895 17.0809C20.8617 17.0132 20.8233 16.9503 20.7967 16.8873L20.5117 16.3899C20.4717 16.3222 20.5383 16.2419 20.6167 16.2624L22.4 16.7189H22.405C22.4083 16.7189 22.41 16.7205 22.4117 16.7205L22.6467 16.7818L22.905 16.8511L23 16.8763V15.8752C23 15.3919 23.41 15 23.9167 15C24.17 15 24.4 15.0976 24.565 15.2566C24.73 15.4156 24.8333 15.6328 24.8333 15.8752V17.3611L25.0234 17.4115C25.0383 17.4162 25.0533 17.4225 25.0667 17.4319C25.1134 17.465 25.18 17.5138 25.265 17.5736C25.3317 17.624 25.4033 17.6854 25.49 17.7483C25.6617 17.879 25.8667 18.0474 26.0917 18.241C26.1517 18.2898 26.21 18.3402 26.2633 18.3906C26.5534 18.6456 26.8783 18.9446 27.1884 19.2752C27.275 19.3681 27.36 19.4625 27.4467 19.5617C27.5333 19.6624 27.625 19.7616 27.705 19.8608C27.81 19.993 27.9233 20.1299 28.0217 20.2732C28.0683 20.3408 28.1217 20.4101 28.1667 20.4778C28.2933 20.6588 28.405 20.8461 28.5117 21.0334C28.5567 21.12 28.6033 21.2144 28.6433 21.3073C28.7617 21.5576 28.855 21.8126 28.915 22.0676C28.9333 22.1227 28.9467 22.1825 28.9533 22.236V22.2486C28.9733 22.3242 28.98 22.4044 28.9867 22.4863C29.0133 22.7476 29 23.0089 28.94 23.2717C28.915 23.3835 28.8817 23.489 28.8417 23.6007C28.8017 23.7078 28.7617 23.8195 28.71 23.925C28.61 24.1438 28.4917 24.3626 28.3517 24.5672C28.3067 24.6428 28.2533 24.7231 28.2 24.7986C28.1417 24.8789 28.0817 24.9544 28.0283 25.0284C27.955 25.1229 27.8767 25.222 27.7967 25.3102C27.725 25.4031 27.6517 25.4959 27.5717 25.5778C27.46 25.7021 27.3533 25.8202 27.2417 25.9335C27.175 26.0075 27.1033 26.0831 27.03 26.1508C26.9584 26.2263 26.885 26.294 26.8183 26.3569C26.7067 26.4624 26.6133 26.5443 26.535 26.6119L26.3517 26.7709C26.325 26.793 26.29 26.8056 26.2533 26.8056H24.8333V28.526H26.62C27.02 28.526 27.4 28.3922 27.7067 28.1467C27.8117 28.0601 28.27 27.6855 28.8117 27.1204C28.83 27.1015 28.8534 27.0873 28.88 27.081L33.815 25.7336C33.9067 25.7084 34 25.7745 34 25.8658Z"
        fill={theme === 'dark' ? '#212121' : 'white'}
      />
    </svg>
  );
};

const TelegramSvg = ({ size = 48 }: { size?: number }) => {
  const { theme } = useTheme();

  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 48 48"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24Z"
        fill={theme === 'dark' ? 'white' : '#212121'}
      />
      <path
        d="M15.1033 22.5294L25.8267 18.0793C26.8849 17.6157 30.4736 16.1324 30.4736 16.1324C30.4736 16.1324 32.1299 15.4834 31.9918 17.0595C31.9458 17.7085 31.5778 19.9799 31.2097 22.4403L30.0595 29.7217C30.0595 29.7217 29.9675 30.7879 29.1853 30.9733C28.4032 31.1587 27.115 30.3243 26.8849 30.1389C26.7009 29.9998 23.4343 27.9138 22.2381 26.894C21.9161 26.6159 21.548 26.0596 22.2841 25.4106C23.9404 23.8809 25.9188 21.9803 27.115 20.7751C27.6671 20.2188 28.2192 18.9208 25.9188 20.4969L19.4281 24.8936C19.4281 24.8936 18.6919 25.3571 17.3117 24.9399C15.9315 24.5227 14.3212 23.9665 14.3212 23.9665C14.3212 23.9665 13.217 23.2711 15.1033 22.5294Z"
        fill={theme === 'dark' ? '#212121' : 'white'}
      />
    </svg>
  );
};

type SocialMediaButtonProps = {
  twitter?: boolean;
  instagram?: boolean;
  github?: boolean;
  opensea?: boolean;
  telegram?: boolean;
  href: string;
  customClasses?: string;
  customStyle?: React.CSSProperties;
};

const SocialMediaButton = ({
  twitter,
  instagram,
  github,
  opensea,
  telegram,
  href,
  customClasses = '',
  customStyle,
}: SocialMediaButtonProps) => {
  const { isMobile } = useViewPort();

  const size = isMobile ? 40 : 48;

  return (
    <div
      style={customStyle}
      className={`mobile:w-40px mobile:h-40px tablet:h-48px tablet:w-48px desktop:h-48px desktop:w-48px mobile:mr-6% tablet:mr-24px last:mr-0 ${customClasses}`}
    >
      <a href={href} target="_blank" rel="noreferrer">
        {twitter && <TwitterSvg size={size} />}
        {instagram && <InstagramSvg size={size} />}
        {github && <GitHubSvg size={size} />}
        {opensea && <OpenSeaSvg size={size} />}
        {telegram && <TelegramSvg size={size} />}
      </a>
    </div>
  );
};

export default SocialMediaButton;
